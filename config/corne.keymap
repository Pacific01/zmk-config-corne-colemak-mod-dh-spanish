/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {

    macros {
        c_trancada: c_trancada {
            label = "ZM_c_trancada";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press &kp LSHFT &kp LCTRL>
                , <&macro_tap &kp U>
                , <&macro_release &kp LSHFT &kp LCTRL>
                , <&macro_tap &kp E &kp KP_N7 &kp RET>
                ;
        };
        c_trancada_mayus: c_trancada_mayus {
            label = "c_trancada_mayus";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press &kp LSHFT &kp LCTRL>
                , <&macro_tap &kp U>
                , <&macro_release &kp LSHFT &kp LCTRL>
                , <&macro_tap &kp C &kp KP_N7 &kp RET>
                ;
        };
    };

    behaviors {
        c_trancada_beha: c_trancada_beha {
            compatible = "zmk,behavior-mod-morph";
            label = "c_trancada_beha";
            #binding-cells = <0>;
            bindings = <&c_trancada>, <&c_trancada_mayus>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// -------------------------------------------------------------------------------------------------
// | TAB      |  Q        |  W  |  F  |  P  |  B   |   |  J  |  L   |  U  |  Y  |  ;        | BKSP |
// | ESC LALT |  A        |  R  |  S  |  T  |  G   |   |  M  |  N   |  E  |  I  |  O        |  '   |
// | SHFT     |  LCTRL Z  |  X  |  C  |  D  |  V   |   |  K  |  H   |  ,  |  .  |  RCTRL /  |  Ã‡   |
//                              | GUI | SPC | BSPC |   | LWR | ENT  | RSE |
            bindings = <
   &kp TAB       &kp Q       &kp W &kp F    &kp P     &kp B       &kp J &kp L   &kp U     &kp Y   &kp SEMI      &kp BSPC
   &kp LALT      &kp A       &kp R &kp S    &kp T     &kp G       &kp M &kp N   &kp E     &kp I   &kp O         &kp SQT
   &mt LSHFT ESC &mt LCTRL Z &kp X &kp C    &kp D     &kp V       &kp K &kp H   &kp COMMA &kp DOT &mt RCTRL FSLH &c_trancada_beha
                                   &kp LGUI &kp SPACE &kp BSPC    &mo 1 &kp RET &mo 2
            >;
        };

        lower_layer {
// -------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI | ALT | SPC |   |     | ENT |     |
            bindings = <
   &kp TAB       &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8   &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP   &kp RIGHT &trans &trans
   &mt LSHFT ESC &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans   &trans    &trans &trans
                                           &kp LGUI     &kp RALT     &kp SPACE      &trans   &kp RET  &trans
            >;
        };

        raise_layer {
// -------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI | ALT | SPC |   |     | ENT |     |
            bindings = <
   &kp TAB       &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL     &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &mt LSHFT ESC &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                                 &kp LGUI &kp RALT &kp SPACE   &trans    &kp RET   &trans
            >;
        };
    };
};

